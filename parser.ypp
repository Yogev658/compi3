%{

#include "hw3_output.hpp"
#include "symbolTable.h"
#include "Element.h"
#include "assert.h"

#include <iostream>
#include <stdlib.h>

using namespace output;
using namespace std;

extern int yylex();
extern int yylineno;

void yyerror (const char*);

SymbolTable table;

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token AUTO
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING

%right NOT
%right IF
%right ASSIGN

%left AND
%left OR
%left LPAREN
%left RPAREN
%left RELOP_EQ
%left BINOP_MULT
%left BINOP_ADD

%nonassoc ELSE
%nonassoc RELOP_REL

%%

Program : Funcs {;};

Funcs : /* epsilon */ {;}
      | FuncDecl Funcs {;};

FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE {} Statements RBRACE ;

RetType : Type {}
        | VOID {};

Formals : /* epsilon */ {}
        | FormalsList {};

FormalsList : FormalDecl {}
            | FormalDecl COMMA FormalsList {};

FormalDecl : Type ID {};

Statements : Statement {}
           | Statements Statement {};

Statement : LBRACE Statements RBRACE {}
          | Type ID SC {assertVariableNotDefined(); $$ = new Statement($1->to<Type>()->type); } //TODO: YOGEV - assert with SCOPE
          | Type ID ASSIGN Exp SC {assertVariableNotDefined(); assertAssignmentIsLegal($1, $4); $$ = new Statement($1->to<Type>()->type); } //TODO: YOGEV - assert with scope
          | AUTO ID ASSIGN Exp SC {assertVariableNotDefined(); $$ = new Statement($4->to<Exp>()->type); } //TODO: assert with SCOPE
          | ID ASSIGN Exp SC {assertAssigmentToID($1, $3);} //TODO: YOGEV add param of SCOPE to assert
          | Call SC {}
          | RETURN SC {assertReturnType(TypeName expected, $1->to<RetType>()->type); } //TODO: add current return from SCOPE
          | RETURN Exp SC {assertReturnType(TypeName expected, $2->to<Exp>()->type); } //TODO: add current return from SCOPE
          | IF LPAREN Exp RPAREN Statement {printProductionRule(22); }
          | IF LPAREN Exp RPAREN Statement ELSE Statement {printProductionRule(23); }
          | WHILE LPAREN Exp RPAREN Statement {printProductionRule(24); }
          | BREAK SC {printProductionRule(25); }
          | CONTINUE SC {printProductionRule(26); };

Call : ID LPAREN ExpList RPAREN {$$ = new Call($1->to<Identifier>()->type); } //TODO: (?) should we save return type of current SCOPE?
     | ID LPAREN RPAREN {$$ = new Call($1->to<Identifier>()->type); }; //TODO: (?) should we save return type of current SCOPE?

ExpList : Exp {}
     | Exp COMMA ExpList {};

Type : INT {$$ = new Type(TYPE_INT);}
    | BYTE {$$ = new Type(TYPE_BYTE); }
    | BOOL {$$ = new Type(TYPE_BOOL); };

Exp : LPAREN Exp RPAREN {$$ = new Exp($2->to<Exp>()->type);}
    | Exp BINOP_ADD Exp {assertBothNumeric($1, $3);}
    | Exp BINOP_MULT Exp {assertBothNumeric($1, $3);}
    | ID {assertVariableDefined($1);} //TODO: add param of SCOPE to assert
    | Call {}
    | NUM {$$ = new Exp(TYPE_INT);}
    | NUM B {$$ = new Exp(TYPE_INT);}
    | STRING {$$ = new Exp(TYPE_STRING);}
    | TRUE {$$ = new Exp(TYPE_BOOL);}
    | FALSE  {$$ = new Exp(TYPE_BOOL);}
    | NOT Exp {assertTypesMatch(TYPE_BOOL, $2->to<Exp>()->type); $$ = new Exp($1->to<Exp>()->type);}
    | Exp AND Exp {assertTypesMatch($1->to<Exp>()->type, $3->to<Exp>()->type); $$ = new Exp($1->to<Exp>()->type);}
    | Exp OR Exp  {assertTypesMatch($1->to<Exp>()->type, $3->to<Exp>()->type); $$ = new Exp($1->to<Exp>()->type);}
    | Exp RELOP_EQ Exp  {assertTypesMatch($1->to<Exp>()->type, $3->to<Exp>()->type); $$ = new Exp($1->to<Exp>()->type);}
    | Exp RELOP_REL Exp {assertTypesMatch($1->to<Exp>()->type, $3->to<Exp>()->type); $$ = new Exp($1->to<Exp>()->type);}
    | LPAREN Type RPAREN Exp  {assertCastingIsLegal($2, $4); $$ = new Exp($2->to<Exp>()->type);};

%%

int main() {
    table = SymbolTable();
    return yyparse();
}

void yyerror(const char*) {
    errorSyn(yylineno);
}